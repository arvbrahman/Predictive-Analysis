setwd("~/GitHub/Predictive-Analysis/Decision Trees")
library(ISLR)
library(rpart)
Cs<- Carseats
library(caTools)
View(Cs)
Cs$ShelveLoc
table(Cs$ShelveLoc)
spl<- sample.split(Cs$ShelveLoc,SplitRatio = 0.70)
Cs.train<- subset(Cs,spl==T)
Cs.test<- subset(Cs, spl==F)
Target<- ShelveLoc ~ .
#Separating the target variable ----
target <- Wsales ~ . -Sales
rm(target)
Model<- rpart(Target,Cs.train,model = "class")
Model<- rpart(Target,Cs.train,model = "class")
rm(Target)
Model<- rpart(ShelveLoc ~ .,Cs.train,model = "class")
Model<- rpart(Target,Cs.train,method = "class")
Target<- ShelveLoc ~ .
Model<- rpart(Target,Cs.train,method = "class")
plot(Model)
text(Model,pretty = 0)
plot(Model)
text(Model,pretty = 0)
library(rpart.plot)
library(rpart.plot)
rpart.plot(Model)
#Predicting the values for test data
predict(Model,Cs.test,type = "class")
#Predicting the values for test data
predicted<- predict(Model,Cs.test,type = "class")
#
table(predicted,Cs.test$ShelveLoc)
#Splitting the data into train and test
set.seed(123)
spl<- sample.split(Cs$ShelveLoc,SplitRatio = 0.70)
Cs.train<- subset(Cs,spl==T)
Cs.test<- subset(Cs, spl==F)
#Separating the target variable
Target<- ShelveLoc ~ .
#Training the model
Model<- rpart(Target,Cs.train,method = "class")
#Plotting the decision Tree
rpart.plot(Model)
plot(Model)
text(Model,pretty = 0)
#Predicting the values for test data
predicted<- predict(Model,Cs.test,type = "class")
#Plotting the decision Tree
rpart.plot(Model)
#Predicting the values for test data
predicted<- predict(Model,Cs.test,type = "class")
#
table(predicted,Cs.test$ShelveLoc)
#
set.seed(234)
library(e1071)
library(caTools)
setwd("~/GitHub/Predictive-Analysis/Naive Bayes")
spl <- sample.split(iris$Species,SplitRatio = 0.7)
iris.train <- subset(iris,spl==T)
iris.test <- subset(iris,spl==F)
set.seed(123)
spl <- sample.split(iris$Species,SplitRatio = 0.7)
iris.train <- subset(iris,spl==T)
iris.test <- subset(iris,spl==F)
str(iris)
summary(iris)
#Training the  model
model<- naiveBayes(as.matrix(iris.train),iris.train$Species)
predict(model,as.matrix(iris.test))
library(gmodels)
CrossTable(p,iris.test$Species,prop.chisq = F)
#Predicting and confusion matrix
p<- predict(model,as.matrix(iris.test))
CrossTable(p,iris.test$Species,prop.chisq = F)
View(iris.test)
help(iris)
help(boston)
??boston
??airquality
View
View(airquality)
help("airquality")
