setwd("~/GitHub/Predictive-Analysis/new")
setwd("~/GitHub/Predictive-Analysis/new")
setwd("~/GitHub/Predictive-Analysis/SVM")
i<- iris
summary(i)
hist(i$Species)
hist(i$Sepal.Width)
str(i)
library(caTools)
set.seed(134)
split<- sample.split(i$Species,SplitRatio = 0.75)
i.train <- subset(i,split==T)
i.test<- subset(i,split==F)
library(e1071)
library(e1071)
#Training the model
Model <- svm(Species ~ . ,
i.train,
type = 'C - classification',
kernel = 'kernel')
#Training the model
Model <- svm(Species ~ . ,
i.train,
type = 'C - classification',
kernel = 'linear')
#Training the model
Model <- svm(Species ~ . ,
i.train,
type = 'C-classification',
kernel = 'linear')
Model
predict(Model,i.test[9])
predict(Model,i.test[,9])
predict(Model,i.test[-9])
predict(Model,i.test[-5])
predict(Model,i.test[-5])
predict(Model,i.test)
hist(i$Sepal.Width)
#
library(caTools)
library(e1071)
#
View(mtcars)
summary(mtcars)
str(mtcars)
#
set.seed(92820)
s <- sample.split(mtcars$gear,SplitRatio = 0.7)
mtc.train <- subset(mtcars,s==T)
mtc.test <- subset(mtcars,s==F)
#
Model <- svm(gear ~ . ,
mtc.train,
type = 'C-classification',
kernel = 'linear')
Model
#
predict(Model,mtc.test)
s <- sample.split(mtcars$mpg ,SplitRatio = 0.7)
mtc.train <- subset(mtcars,s==T)
mtc.test <- subset(mtcars,s==F)
#Training the model
Model <- svm(mpg ~ . ,
mtc.train,
type = 'C-classification',
kernel = 'linear')
Model
#Training the model
Model <- svm(as.factor(mpg) ~ . ,
mtc.train,
type = 'C-classification',
kernel = 'linear')
Model
#Prediction
predict(Model,mtc.test)
#
library(caTools)
library(e1071)
#
library(caTools)
library(e1071)
#
social <- read.csv(file = "social.csv",stringsAsFactors = F)
View(social)
summary(social)
str(social)
#
set.seed(143)
spl <- sample.split(social$Purchased,SplitRatio = 0.8)
test.soc <- subset(social,spl==T)
train.soc <- subset(social,spl==T)
test.soc <- subset(social,spl==F)
#
model <- svm(Purchased ~ .,
test.soc,
type = 'C-classification',
kernel = 'linear')
model
#
model <- svm(Purchased ~ .,
train.soc,
type = 'C-classification',
kernel = 'linear')
model
#
predict(model,test.soc)
plot(model)
plot.svm(model)
