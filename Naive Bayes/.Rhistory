d <- read.csv(file.choose(),stringsAsFactors = F)
View(d)
library(ggplot2)
ggplot(d,aes(sales,profit))+
geom_point()
#Q3 ----
#Acquiring the data
TG_data <- ToothGrowth
View(TG_data)
#Loading the data
mail_Data <- read.csv(file = "spam.csv",stringsAsFactors = F)
setwd("C:/Users/arvbr/OneDrive/Documents/GitHub/Predictive-Analysis/Naive Bayes")
#Loading the data
mail_Data <- read.csv(file = "spam.csv",stringsAsFactors = F)
#Observing the data
str(mail_Data)
table(mail_Data$type)
#Making categorical variable which makes it easy for classification
mail_Data$type <- as.factor(mail_Data$type)
str(mail_Data)
table(mail_Data$type)
#Data Cleaning Or text cleaning in this data set
library(tm)   #tm - text mining library is used for text cleaning which provides , removing various things
mail_corpus <- iconv(mail_Data$text)
inspect(mail_corpus[1:2])
mail_corpus[1:2]
lapply(mail_corpus, as.character)
inspect(mail_corpus[1:2])
lapply(mail_corpus[1:2], as.character)
inspect(mail_corpus[1:2])
#Loading necessary libraries
library(tidyverse)
View(mail_Data)
#Loading necessary libraries
library(tm)   #tm: text mining library is used for text cleaning
library(caret)
install.packages("caret")
#Loading necessary libraries
library(tm)   #tm: text mining library is used for text cleaning
library(caret)
library(e1071)
#Loading the data
mail_Data <- read.csv(file = "spam.csv",stringsAsFactors = F)
#Observing the data
str(mail_Data)
table(mail_Data$type)
#Removing unnecessary columns &
#converting label into categorical variable which makes it easy for classification
mail_data <- mail_data[,c("type","text")]
#Removing unnecessary columns &
#converting label into categorical variable which makes it easy for classification
mail_Data <- mail_Data[,c("type","text")]
mail_Data$type <- as.factor(mail_Data$type)
str(mail_Data)
#Loading necessary libraries
library(tm)   #tm: text mining library is used for text cleaning
library(caret)
library(e1071)
#Loading the data
mail_Data <- read.csv(file = "spam.csv",stringsAsFactors = F)
#Observing the data
str(mail_Data)
table(mail_Data$type)
#Removing unnecessary columns &
#converting label into categorical variable which makes it easy for classification
mail_Data <- mail_Data[,c("type","text")]
mail_Data$type <- as.factor(mail_Data$type)
str(mail_Data)
#Data Cleaning Or text cleaning in this data set
mail_corpus <- Corpus(VectorSource(mail_Data$text))     #Creating text corpus
View(mail_corpus)
library(dplyr)
#Loading the data
mail_Data <- read.csv(file = "spam.csv",stringsAsFactors = F)
#Observing the data
str(mail_Data)
table(mail_Data$type)
#Removing unnecessary columns &
#converting label into categorical variable which makes it easy for classification
mail_Data <- mail_Data[,c("type","text")]
mail_Data$type <- as.factor(mail_Data$type)
str(mail_Data)
#Data Cleaning Or text cleaning in this data set
mail_corpus <- Corpus(VectorSource(mail_Data$text))%>%
tm_map(content_transformer(tolower))%>%
tm_map(removeNumbers)%>%
tm_map(removePunctuation)%>%
tm_map(removeWords,stopwords("en"))
#Data Cleaning Or text cleaning in this data set
mail_corpus_clean <- iconv(mail_Data$text)%>%
Corpus(VectorSource)%>%
tm_map(content_transformer(tolower))%>%
tm_map(removeNumbers)%>%
tm_map(removePunctuation)%>%
tm_map(removeWords,stopwords("en"))
#Data Cleaning Or text cleaning in this data set
mail_corpus_clean <- iconv(mail_Data$text)
mail_corpus_clean<-  Corpus(VectorSource(mail_corpus_clean))%>%
tm_map(content_transformer(tolower))%>%
tm_map(removeNumbers)%>%
tm_map(removePunctuation)%>%
tm_map(removeWords,stopwords("en"))
View(mail_corpus_clean)
library(SnowballC)
mail_corpus_clean<-  Corpus(VectorSource(mail_corpus_clean))%>%
tm_map(content_transformer(tolower))%>%
tm_map(removeNumbers)%>%
tm_map(removePunctuation)%>%
tm_map(removeWords,stopwords("en"))%>%
tm_map(stemDocument,language = "en")
View(mail_corpus_clean)
#Loading the data
mail_Data <- read.csv(file = "spam.csv",stringsAsFactors = F)
#Observing the data
str(mail_Data)
table(mail_Data$type)
#Removing unnecessary columns &
#converting label into categorical variable which makes it easy for classification
mail_Data <- mail_Data[,c("type","text")]
mail_Data$type <- as.factor(mail_Data$type)
str(mail_Data)
#Data Cleaning Or text cleaning in this data set
mail_corpus_clean <- iconv(mail_Data$text)
mail_corpus_clean<-  Corpus(VectorSource(mail_corpus_clean))%>%
tm_map(content_transformer(tolower))%>%
tm_map(removeNumbers)%>%
tm_map(removePunctuation)%>%
tm_map(removeWords,stopwords("en"))%>%
tm_map(stemDocument)
View(mail_corpus_clean)
#Loading the data
mail_Data <- read.csv(file = "spam.csv",stringsAsFactors = F)
#Observing the data
str(mail_Data)
table(mail_Data$type)
#Removing unnecessary columns &
#converting label into categorical variable which makes it easy for classification
mail_Data <- mail_Data[,c("type","text")]
mail_Data$type <- as.factor(mail_Data$type)
str(mail_Data)
#Data Cleaning Or text cleaning in this data set
mail_corpus_clean <- iconv(mail_Data$text)
mail_corpus_clean<-  Corpus(VectorSource(mail_corpus_clean))%>%
tm_map(content_transformer(tolower))%>%
tm_map(removeNumbers)%>%
tm_map(removePunctuation)%>%
tm_map(removeWords,stopwords("en"))%>%
tm_map(stemDocument,langauge = "en")
#DTM
mail_dtm <- DocumentTermMatrix(mail_corpus_clean)
View(mail_dtm)
#Loading the data
mail_Data <- read.csv(file = "spam.csv",stringsAsFactors = F)
#Observing the data
str(mail_Data)
table(mail_Data$type)
#Removing unnecessary columns &
#converting label into categorical variable which makes it easy for classification
mail_Data <- mail_Data[,c("type","text")]
mail_Data$type <- as.factor(mail_Data$type)
str(mail_Data)
#Data Cleaning Or text cleaning in this data set
mail_corpus_clean <- iconv(mail_Data$text)
mail_corpus_clean<-  Corpus(VectorSource(mail_corpus_clean))%>%
tm_map(content_transformer(tolower))%>%
tm_map(removeNumbers)%>%
tm_map(removePunctuation)%>%
tm_map(removeWords,stopwords("en"))%>%
tm_map(stripWhitespace)%>%
tm_map(stemDocument,langauge = "en")
#DTM
mail_dtm <- DocumentTermMatrix(mail_corpus_clean)
View(mail_dtm)
#splitting the data
set.seed(123)
trainIndex <- createDataPartition(mail_Data$type, p = 0.7, list = F)
mail_train_data <- dtm[trainIndex, ]
mail_train_data <- mail_dtm[trainIndex, ]
mail_test_data <- mail_dtm[-trainIndex, ]
mail_train_labels <- mail_Data$type[trainIndex]
mail_test_labels <- mail_Data$type[-trainIndex]
library(e1071)
#Training the model
model <- naiveBayes(mail_train_data,mail_train_labels)
View(mail_train_data)
#Training the model
model <- naiveBayes(as.matrix(mail_train_data),mail_train_labels)
predictions <- predict(model,as.matrix(mail_test_data))
#Evaluating
confusionMatrix(predictions,mail_test_labels)
#Evaluating ----
confusionMatrix(predictions,mail_test_labels)
#Evaluating ----
confusionMatrix(predictions,mail_test_labels)
#Loading necessary libraries ----
library(dplyr)
library(tm)   #tm: text mining library is used for text cleaning
library(SnowballC)
library(caret)
library(e1071)
#Loading the data ----
mail_Data <- read.csv(file = "spam.csv",stringsAsFactors = F)
#Observing the data ----
str(mail_Data)
table(mail_Data$type)
#cleaning and transforming the data ----
#Removing unnecessary columns &
#converting label into categorical variable which makes it easy for classification
mail_Data <- mail_Data[,c("type","text")]
mail_Data$type <- as.factor(mail_Data$type)
str(mail_Data)
#Data Preprocessing ----
#text cleaning in this data set
mail_corpus_clean <- iconv(mail_Data$text)
mail_corpus_clean<-  Corpus(VectorSource(mail_corpus_clean))%>%
tm_map(content_transformer(tolower))%>%
tm_map(removeNumbers)%>%
tm_map(removePunctuation)%>%
tm_map(removeWords,stopwords("en"))%>%
tm_map(stripWhitespace)%>%
tm_map(stemDocument)
#DTM
mail_dtm <- DocumentTermMatrix(mail_corpus_clean)
#Splitting the data ----
set.seed(123)
trainIndex <- createDataPartition(mail_Data$type, p = 0.7, list = F)
mail_train_data <- mail_dtm[trainIndex, ]
mail_test_data <- mail_dtm[-trainIndex, ]
mail_train_labels <- mail_Data$type[trainIndex]
mail_test_labels <- mail_Data$type[-trainIndex]
#Training the model ----
model <- naiveBayes(as.matrix(mail_train_data),mail_train_labels)
predictions <- predict(model,as.matrix(mail_test_data))
#Evaluating ----
confusionMatrix(predictions,mail_test_labels)
#Loading the data ----
mail_Data <- read.csv(file = "spam.csv",stringsAsFactors = F)
#Observing the data ----
str(mail_Data)
table(mail_Data$type)
#cleaning and transforming the data ----
#Removing unnecessary columns &
#converting label into categorical variable which makes it easy for classification
mail_Data <- mail_Data[,c("type","text")]
mail_Data$type <- as.factor(mail_Data$type)
#Data Preprocessing ----
#text cleaning in this data set
mail_corpus <- iconv(mail_Data$text, to = "UTF-8", sub = "")
mail_corpus_clean<-  Corpus(VectorSource(mail_corpus))%>%
tm_map(content_transformer(tolower))%>%
tm_map(removeNumbers)%>%
tm_map(removePunctuation)%>%
tm_map(removeWords,stopwords("en"))%>%
tm_map(stripWhitespace)%>%
tm_map(stemDocument)
#DTM
mail_dtm <- DocumentTermMatrix(mail_corpus_clean)
#Splitting the data ----
set.seed(123)
trainIndex <- createDataPartition(mail_Data$type, p = 0.7, list = F)
mail_train_data <- mail_dtm[trainIndex, ]
mail_test_data <- mail_dtm[-trainIndex, ]
mail_train_labels <- mail_Data$type[trainIndex]
mail_test_labels <- mail_Data$type[-trainIndex]
intersect(colnames(mail_train_data), colnames(mail_test_data))
common_features <- intersect(colnames(mail_train_data), colnames(mail_test_data))
mail_train_data <- mail_train_data[, common_features]
mail_test_data <- mail_test_data[, common_features]
#Training the model ----
model <- naiveBayes(as.matrix(mail_train_data),mail_train_labels)
predictions <- predict(model,as.matrix(mail_test_data))
#Evaluating ----
confusionMatrix(predictions,mail_test_labels)
library(gmodels)
CrossTable(predictions,mail_test_labels,prop.chisq = F)
